1. Программирование - процесс написания программного кода, разработка ПО - комплексный процесс создания программы (от идеи и до поддержки после выпуска), + что-то про разработку, как проектную деятельность
2. ПО - множество программ, исп. для управл. пк
    свойства: сложность (уникальные составные части, огромное количество состояний, растёт нелинейно), согласованность с другим ПО (из нее и вырастает большая часть сложности), изменяемость (постоянно, расширяется обасть применения, меняется ПК железо, а программа должна работать и с новым), незримость (нельзя потрогать руками, затрудняет процесс проектирования и общение между разработчиками)
3. Pull/Push, рабочий продукт - оформленные результаты работы (в окончательной или промежуточной стадии), помогает отслеживать процесс воплощения проекта, оценивать результат. Необязательно будет материален - налаженный процесс тоже раб. прод. и не всегда он входит в итоговую поставку (процесс тестирования например)
4. Жизн. цикл - период времени, нач с решения о созд ПП и заканч в момент полного изъятия из эксплуатации. Модели: каскадн (одна итерация, делаем всё строго по очереди, в случае ошибок возвращаемся назад, нет гибкости (возврат только на 1 этап, проблемы с интеграцией появл слишком поздно, нельзя посмотреть на результат во время работы, неустойчива к потере финансирования, применима в маленьких проектах), V-обр (как первая, решила проблему поиска ошибок и не решила проблему потери актуальности продукта к концу разработки), инкрементальная, спиральная.
5. Спиральная - ПО созд итерационно, исп метод прототипирования (действ продукт с отдельными функциями и/или внешними интерфейсами), лишена недостатков водопадной (особенно неактуальности), каждый виток спирали - фаза, в которой может быть несколько видов деятельности. Этапы витка: анализ, проектирование, разработка, верификация. Широко не применяется.
6. Agile - набор практик, цель - оперативная реакция на изменения в ходе раб процесса. Ценности: люди важнее процессов и инструментов, создание продукта важнее документации, позиция клиента важнее контракта, коррективы важнее изначальной стратегии.
    SCRUM - работа жесткими циклами, релиз в конце каждого, участники делятся на роли, ключевая метрика - скорость, задачи не меняются в ходе цикла, после окончания Ц команда собирается  и обсуждает
        АВТОБУС с остановками
    7. Kanban - непрерывный процесс разработки, задачи могут меняться на лету, нет разделения на роли, ключевые метрики - сроки и циклы времени задач 
        МАРШРУТКА выходи где хочешь
8. Доски - место, где располагаются карточки с задачами, их статусы, приоритет и т.д.
9. PMBOK - описание знаний в сфере управления проектами, не практическое руководство, выделены главные процессы управления проектами, классификация участников проекта: заказчик, менеджер, спонсор, источники влияния, офис управления, исполнитель, команда проекта
10. SWEBoK - описание знаний в сфере программной инженерии: требования, проектирование, конструирование, тестирование, сопровождение, управление и т.д.
11. Дисциплина обязательств - основа разделения обязанностей в бизнесе и пром. производстве, деловая этика
12. Взаимоотношения в команде: каждый имеет право на своё мнение, подчинение целям коллектива, согласованные действия, уважение, четсность и вежливость. Codestyle.
13. Конфигурационное управление - поддержание файловых активов в актуальном состоянии у всех участников проекта (упр версиями и сборками). Единицы: пользовательская и проектная документации, исходные тексты, пакеты тестов и тестовые отчёты, установочные пакеты. У каждой Е - структурированный набор файлов, ответственное лицо, практика управления, автоматический контроль целостности. Система контроля версий. Локальные, централизованные и распределенные.
14. Проект - предприятие, направленное на создание уникального продукта, услуги или результата. состояния: планирование (сроки, график выполнения, требуемые ресурсы), организация (распределение ролей и обязанностей), управление (руководство работами, решение проблем, обмен информацией с заинтересованными лицами).
    Управление проектами - деятельность по направленному изменению проектируемого объекта и достижение проектного результата. Стадии: замысел, разработка плана, начало, исполнение, завершение
15. Управление требованиями - идентефикация, выявление, документирование, анализ, отслеживание, приоретизация требований на протяжении всего жизненного цикла продукта
    Требование - любое условие, которому должна соответствовать разрабатываемая система или ПО.
    Функциональные - что система должна делать,нефункциональные - как она должна делать (надежность, особенности поставки, переносимость)
    свойства: модифицруемость, полнота (отдельного - его текст не требует детализации, системы - не требуются дополнительные требования), ясность (одинаково воспринимаются всеми совладельцами системы), непротиворечивость другим, проверяемость, необходимость (из бизнес требований) и полезность (повышение эргономических качеств), осуществимость
16. Варианты формализации требований
    формализация: неформальная постановка, документ (список), граф с зависимостями, модель
    Use case - сценарий взаимодействия пользователя (не всегда человек) с системой; фиксирует соглашение о поведении данной системы при определенных запросах. На UML показывается актором и овалом, соединенными линией (ассоциация). Акторы и use case могут "наследоваться" - незакрашенная стрелочка (обобщение). use case могут включать в себя что-то - пунктирная закрашенная стрелка с надписью include (включение). в обратную сторону и со словом extend (расширение) - выборочное отношение включения, оно необязательно.
    User story - описание типа пользователя и его действий, обычно используется в Agile (инструмент планирования) "как ... я хочу ..., чтобы ..." состоит из описания пользователя, его намерения и конечная выгода.
    DoD и DoR - критерии выполнения и готовности /\ соответственно. Для этого user story должна быть ясной, выполнимой и проверяемой. Они определяются в начале спринта, когда будет реализовываться US. Варьируются от спринта к спринту.
    Acc. crit. - критерии приёма и завершения работы над US (когда она обладает всеми функциями для удовл. потреб.)
17. Архитектура ПО. Множественность точек зрения.
    внутренняя структура прог. прод., основы польз. интерфейса или набор высокоуровневых решений, определ. ключевые элементы и связи между ними.
    непрерывно связана с декомпозицией, выделением независимых компонентов, связями между ними. Полезно создавать несколько моделей от разных точек зрения. ОПУСКАЮТ РЕАЛИЗАЦИЮ.
    Множественность из-за отсутствия единых стандартов разработки - это творческий процесс. Характеристики точки зрения: цель (зачем она рассматривается) и целевая аудитория (для кого предназначается).

UML пропущу, очень много писать

21. Методы обесп. кач. ПО. Тестирование + виды. Тест-кейсы
    QA - обесп. кач. - мероприятия на всём цикле разработки, выпуска и эксплуатации ПО для обеспечения качества продукта.
    Технические: bug tracker, автотестирование, unit-тестирование, исп. соврем. интегрированных сред разработки, валидаторы кода, VCS
    Организационные: планирование работ, оценка рисков, проведение статусных митингов, ведение метрик (ещё две без описания, не стал сюда включать, вдруг она попросит расшифровать)
    Тестирование - процесс испытания ПО, цель которого - проверка соотвествия реального поведения заявленному. Делится на функциональное (проверка работы функций ПО - работает или нет) и нефункциональное (проверка как работают функции ПО: производительность, интерфейс, логика использования (UX), защищенность, проблемы при установке/удалении, совместимость, надежность, локализация(переводы)). Бывает ручным и автоматизированным. Черный, серый (частично знаем внутреннюю структуру) и белый ящик. 
    По уровню: 
        модульное (Unit) - проверка отдельных модулей, выявление локализованных ошибок и готовность системы перейти на следующий этап, создание среды вокруг каждого модуля, обычно выявляются ошибки в реализации алгоритмов; 
        интеграционное - проверка взаимодействия нескольких модулей, ошибки в реализации взаимодействий между ними, также создается тестовое окружение; 
        системное - провека целого приложения, обычно черный ящик, ошибки в работе приложения в целом;
        приемочное - оценка соотвествия заявленным требованиям.
    тест-кейс - описание процесса тестирования какой-то части или функции.     5 частей: номер, название, предусловия, порядок действий собственно кейса, оижадемый результат..... ???а фактический результат???; виды результатов: положительный, отрицательный, кейс не завершен.
    Один кейс проверяет только одну вещь, не должен зависеть от других кейсов, шаги и результат должны быть сформулированы четко и однозначно, в кейсе должна быть вся необходимая информация, без лишних деталей, указаны типы вводимых данных (валидные или нет)
22. ООП. Осн. принципы SOLID
    ООП - методолгия, представляющая программу в виде совокуности объектов, каждый из которых является экземпляром некоторого класса, а они в свою очередь образуют иерархию наследования
    класс - множество объектов, обладающих общей структурой, поведением и семантикой - это абстракция существенных свойств объектов. this, constructor, new. статические методы - не требующие знания состояния объекта и потому его создания. геттеры и сеттеры. интерфейсы снижают зависимости, добавляют абстракции, зависят как "многие ко многим"
    S один объект - одна функциональность
    O объекты открыты для расширения, но закрыты для изменения
    L Барбара Лисков - объекты могут быть заменены наследниками без нарушения функциональности
    I много мелких интерфейсов лучше одного большого
    D верхний уровень не должен зависеть от нижнего, только наоборот. Не абстракции от деталей, а детали от абстракций
23. XML. XSD. XPath
    расширяемый язык разметки, формат: заголовочный тег, корневой тег, теги с данными + их закрывающие теги, закрывающий корневой тег. HTML для отображения данных, XML для передачи. теги не предопределены. Благодаря простому текстовому формату позволяет легко передавать данные между приложениями. Другие форматы: json (чутка компактнее, более человекочитаем), csv (максимально компактный, но строка ломается при удалении даже одного разделителя)
    XSD - язык описания структуры XML документа. Позволяет проверить структуру, модель содержания и типы данных помимо союственно синтаксиса XML. Позволяет читать XML сразу как нужные данные, а не текст. 
    XPath - язык запросов к элементам XML-документа и их атрибутам. Использует синтаксис путей (как в винде в верхней строке проводника) для навигации по XML.
24. Логирование
    запись событий в рамках процесса. Может в файл или базу данных. Возможность отслеживания хода исполнения программы. Структурированное имя файла. Важные пункты: критерии ротации (удаления, архивации, перезаписи), набор событий, их разбиение на уровни (для максимального количества сообщений при разработке и последующего уменьшения). НЕЛЬЗЯ ЛОГИРОВАТЬ ДАННЫЕ (особенно пользователей). Что следует логировать: начало-конец, вопросы безопасности (попытки подбора паролей, вход важных пользователей), переходы между состояниями, информация для последующего дебага при необходимости, выполняемые потоки. Уровень Л - разделение событий по приоритетам. 
    Логгер - объект, отвечающий за запись событий в хранилище, имеет имя и уровень.   начальная точка
    Appender - конечная точка для записи информации о событии (файл, БД, консоль...)
    Layout - формат вывод сообщений.
    В Java: log4j, Java Util Logging, SLF4J
25. Многопоточность
    параллельное выполнение нескольких потоков для повышения производительности. Потоки делятся на основной (тот, где запущен метод main) и побочные. При равенстве количества потоков и ядер получаем максимальную производительность. Исключения в одном потоке не влияют на другие. Жизненный цикл потока: новый, готовый к выполнению, выпоняемый, ожидающий, остановленный. 
26. Обработка исключений
    исключительные, незапланированные ситуации в работе программы
    checked - проверяемые - компилятор на этапе К потребует их обработать или пробросить выше
    unchecked - непроверяемые - И. времени выполнения.
    try catch finally
    throw
27. CMMI
    комплексная модель производительности и зрелости (речь о команде разработки)
    набор рекомендаций и практик, реализация которых достичь целей в определенной области деятельности
    1 уровень (???) - хаотичные, реактивные, непредсказуемые процессы, работает только в небольших компаниях
    2 (управляемый) - управляемый; требования управляются, планируются и контролируются, но процессы имеют долю реактивности и выглядят как последовательность черных ящиков
    3 (определенный) - установлены стандарты в пределах организации, становится видно содержание черных ящиков из 2
    4 - (количественно управляемый) - предсказуемость процессов и возможность ею управлять количественно
    5 - (постоянного улучшения) - уже имеются точные характеристики эффективности процессов, что позволяет последовательно улучшать их. 
    некоторые процессные области: управление требованиями, планирование, оценка качества товаров, интеграция продуктов, управление рисками, организационные инновации
    внедрение ~ позволяет оценить эффективность процессов, установить направления, требующие модернизации и модернизировать их. 
    также обеспечить стабильно высокое качество разработок и повысить конкурентоспособность и обеспечить развитие и расширение компании.